// This file was generated automatically by Qleany's generator, edit at your own risk! 
// If you do, be careful to not overwrite it when you run the generator again.
#pragma once

#include "{{ export_header_file }}"
#include <QObject>

namespace {{ application_cpp_domain_name }}::Presenter
{
class {{ export }} {{ single.class_name_pascal }} : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int id READ id WRITE setId RESET resetId NOTIFY idChanged FINAL)
    Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged FINAL)

  public:
    explicit {{ single.class_name_pascal }}(QObject *parent = nullptr);

    int id() const;
    void setId(int newId);
    void resetId();

    {% for field in single.fields %}
    {% if field.name_camel != "id" %}
    {{ field.type }} {{ field.name_camel }}() const;
    void set{{ field.name_pascal }}({% if field.type in ['int', 'double', 'float', 'bool'] %}{{ field.type }} new{{ field.name_pascal }}{% else %} const {{ field.type }} &new{{ field.name_pascal }}{% endif %});
    {% endif %}
    {%- endfor %}

  signals:

    void idChanged();
    {% for field in single.fields %}
    {% if field.name_camel != "id" %}
    void {{ field.name_camel }}Changed();
    {% endif %}
    {%- endfor %}

  private:
    int m_id;
    
    {% for field in single.fields %}
    {% if field.name_camel != "id" %}
    {{ field.type }} m_{{ field.name_camel }};
    {% endif %}
    {%- endfor %}
};

} // namespace {{ application_cpp_domain_name }}::Presenter
