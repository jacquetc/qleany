// This file was generated automatically by Qleany's generator, edit at your own risk! 
// If you do, be careful to not overwrite it when you run the generator again.
#pragma once

#include "controller_export.h"
#include "event_dispatcher.h"
{% if feature.crud.enabled %}
#include "{{ feature_name_snake }}/{{ entity_name_snake }}_dto.h"
    {%if feature.crud.get_with_details %}
#include "{{ feature_name_snake }}/{{ entity_name_snake }}_with_details_dto.h"
    {% endif %}
    {%if feature.crud.create %}
#include "{{ feature_name_snake }}/create_{{ entity_name_snake }}_dto.h"
    {% endif %}
    {%if feature.crud.update %}
#include "{{ feature_name_snake }}/update_{{ entity_name_snake }}_dto.h"
#include "qleany/contracts/repository/interface_repository_provider.h"
    {% endif %}
#include "qleany/tools/undo_redo/threaded_undo_redo_system.h"
#include <QCoroTask>
#include <QObject>
#include <QSharedPointer>

using namespace Qleany::Contracts::Repository;
using namespace Qleany::Tools::UndoRedo;
using namespace {{ application_cpp_domain_name }}::Contracts::DTO::{{ entity_name_pascal }};

namespace {{ application_cpp_domain_name }}::Controller::{{ feature_name_pascal }}
{

class {{ export }} {{ feature_name_pascal }}Controller : public QObject
{
    Q_OBJECT
  public:
    explicit {{ feature_name_pascal }}Controller(QObject *parent, InterfaceRepositoryProvider *repositoryProvider,
                                 ThreadedUndoRedoSystem *undo_redo_system,
                                 QSharedPointer<EventDispatcher> eventDispatcher);

    static {{ feature_name_pascal }}Controller *instance();

  public slots:

{% if feature.crud.enabled %}
    {%if feature.crud.get %}
    QCoro::Task<{{ entity_name_pascal }}DTO> get(int id);
    {% endif %}
    {%if feature.crud.get_with_details %}
    QCoro::Task<{{ entity_name_pascal }}WithDetailsDTO>  getWithDetails(int id);
    {% endif %}
    {%if feature.crud.get_all %}
    QCoro::Task<QList<{{ entity_name_pascal }}DTO>> getAll();
    {% endif %}
    {%if feature.crud.create %}
    QCoro::Task<{{ entity_name_pascal }}DTO> create(const Create{{ entity_name_pascal }}DTO &dto);
    {% endif %}
    {%if feature.crud.update %}
    QCoro::Task<{{ entity_name_pascal }}DTO> update(const Update{{ entity_name_pascal }}DTO &dto);
    {% endif %}
    {%if feature.crud.remove %}
    QCoro::Task<bool> remove(int id);
    {% endif %}
    {%if feature.crud.updateTree %}
    QCoro::Task<bool> removeTree(int id);
    {% endif %}

    {%if feature.crud.create %}
    static Contracts::DTO::{{ entity_name_pascal }}::Create{{ entity_name_pascal }}DTO getCreateDTO();
    {% endif %}
    {%if feature.crud.update %}
    static Contracts::DTO::{{ entity_name_pascal }}::Update{{ entity_name_pascal }}DTO getUpdateDTO();
    {% endif %}

  private:
    static QScopedPointer<{{ feature_name_pascal }}Controller> s_instance;
    InterfaceRepositoryProvider *m_repositoryProvider;
    ThreadedUndoRedoSystem *m_undo_redo_system;
    QSharedPointer<EventDispatcher> m_eventDispatcher;
    {{ feature_name_pascal }}Controller() = delete;
    {{ feature_name_pascal }}Controller(const {{ feature_name_pascal }}Controller &) = delete;
    {{ feature_name_pascal }}Controller &operator=(const {{ feature_name_pascal }}Controller &) = delete;
};

} // namespace {{ application_cpp_domain_name }}::Controller::{{ feature_name_pascal }}
